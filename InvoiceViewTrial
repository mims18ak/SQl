'This works in psql and bash, try it out'
'I decided on using Stored Procedures to get this complex view accompished.'
'Most of this code is based off of the get_return_id_last_id() procedure'
'It assumes there is only one terminal to check out cars so the last return_id is what I am using--simplicity at crunch time'
'I will pick this back up around noon'  

drop view invoice_vew;
create view invoice_vew as
select now() as invoice_date, get_return_id_last_id(), get_payment_id_last_id(), 
	   get_car_id_last_id(), get_lastname(), get_phone(), get_date_car_rented(),
	   miles_check_out(), get_return_date(), get_return_miles(), (get_return_miles() - miles_check_out()),
	   daily_rate(), calculate_days_rented(), calculate_check_out_charge_days_times_rate(), get_ins_option_total();	   
select * from invoice_vew;	


ibuniak=> select * from extra_charge_view;
ERROR:  permission denied for relation extra_charge_view


FUNCTIONS USED SO FAR:
now()
get_return_id_last_id()
get_payment_id_last_id() 
get_car_id_last_id()
get_lastname()
get_phone()
get_date_car_rented()
miles_check_out() 
get_return_date() 
get_return_miles()
get_return_miles() - miles_check_out()
daily_rate()
calculate_days_rented()
calculate_check_out_charge_days_times_rate()
get_ins_option_total()




'get_return_id_last_id()'
'2'
CREATE OR REPLACE FUNCTION get_return_id_last_id() RETURNS bigint
AS
$$ 
	select last_value from return_tbl_return_id_seq		
$$ LANGUAGE SQL;
SELECT get_return_id_last_id();




'get_payment_id_last_id()'
'3'
CREATE OR REPLACE FUNCTION get_payment_id_last_id() RETURNS bigint
AS
$$ 
	select last_value from payment_tbl_payment_id_seq		
$$ LANGUAGE SQL;
SELECT get_payment_id_last_id();




'get_car_id_last_id()'
'4'
CREATE OR REPLACE FUNCTION get_car_id_last_id() RETURNS bigint
AS
$$ 
	select last_value from car_tbl_car_id_seq		
$$ LANGUAGE SQL;
SELECT get_car_id_last_id();




'get_last_name from customer_tbl where last_name = '
'5'
CREATE OR REPLACE FUNCTION get_lastname() RETURNS text
AS
$$ 
	select last_name 
	from customer_tbl c, return_tbl r
	WHERE c.customer_id = r.customer_id 
		and return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT get_lastname();




'get_phone from customer_tbl where last_name has get_return_id_last_id()'
'6'
CREATE OR REPLACE FUNCTION get_phone() RETURNS numeric
AS
$$ 
	select phone 
	from customer_tbl c, return_tbl r
	WHERE c.customer_id = r.customer_id 
		and return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT get_phone();




'b.date_out as date_rented get_date_car_rented()'
'7'
CREATE OR REPLACE FUNCTION get_date_car_rented() RETURNS date
AS
$$ 
	select c.invoice_date 
	from booking_tbl b, check_out_tbl c, return_tbl r
	where b.booking_id = c.booking_id 
		and b.customer_id = r.customer_id
		and r.return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT get_date_car_rented();




'works for booking_id = 19	Many have data integretity issues.  Must TRIGGRER everything.'
'car.Odometer as original_milage miles_check_out()'
'8'
CREATE OR REPLACE FUNCTION miles_check_out() RETURNS numeric
AS
$$ 
	select odometer 
	from booking_tbl b, car_tbl car, return_tbl r
	WHERE b.car_id = car.car_id
		and b.customer_id = r.customer_id
		and r.return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT miles_check_out();




'b.return_date as return_date'
'9'
CREATE OR REPLACE FUNCTION get_return_date() RETURNS date
AS
$$ 
	select b.return_date 
	from booking_tbl b, customer_tbl c, return_tbl r
	where b.customer_id = c.customer_id
		and b.customer_id = r.customer_id
		and r.return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT get_return_date();




'r.new_mileage as return_miles'
'10'
CREATE OR REPLACE FUNCTION get_return_miles() RETURNS numeric
AS
$$ 
	select r.new_mileage
	from booking_tbl b, customer_tbl c, return_tbl r
	where b.customer_id = c.customer_id
		and b.customer_id = r.customer_id
		and r.return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT get_return_miles();




'I was struggling with this one and found an easy way out for now.'
'return_miles_total as miles driven'
'11'
select (get_return_miles() - miles_check_out());




'car_tbl.rate as 'daily rate'
'12'
CREATE OR REPLACE FUNCTION daily_rate() RETURNS numeric
AS
$$ 
	select car.rate 
	from booking_tbl b, car_tbl car, return_tbl r
	WHERE b.car_id = car.car_id
		and b.customer_id = r.customer_id
		and r.return_id = get_return_id_last_id();			
$$ LANGUAGE SQL; 
SELECT daily_rate();




'booking_tbl.number_of_days'
'13' 
CREATE OR REPLACE FUNCTION calculate_days_rented() RETURNS int 
AS 
$$
     SELECT get_return_date() - get_date_car_rented();
 $$
LANGUAGE SQL;
select calculate_days_rented();




'check_out_tbl.charge = charge car_tbl.rate  * booking_tbl.number_of_days'
'14'
CREATE OR REPLACE FUNCTION calculate_check_out_charge_days_times_rate() RETURNS numeric 
AS 
$$
     SELECT daily_rate() * calculate_days_rented();
$$ LANGUAGE SQL;
select calculate_check_out_charge_days_times_rate();




'I cannot get the --CASE...END AS ins_cost_total-- to run.  It defaults to get_ins_option_total.'
'INS_tbl.company '
'15'
CREATE OR REPLACE FUNCTION get_ins_option_total() RETURNS numeric
AS 
$$
    select case
		when t.day_rate > 0 then t.day_rate * b.number_of_days 
		else null
	end as ins_cost_total
	from ins_tbl i, insurance_type_tbl t, return_tbl r, booking_tbl b
	where i.type_id = t.type_id 
		and i.customer_id = r.customer_id 
		and i.customer_id = b.customer_id 
		and r.return_id = get_return_id_last_id();
$$ LANGUAGE SQL;
select get_ins_option_total();  






